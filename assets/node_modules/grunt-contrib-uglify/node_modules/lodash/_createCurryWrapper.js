var apply = require('./_apply'),
    createCtorWrapper = require('./_createCtorWrapper'),
    createHybridWrapper = require('./_createHybridWrapper'),
    createRecurryWrapper = require('./_createRecurryWrapper'),
<<<<<<< HEAD
    getPlaceholder = require('./_getPlaceholder'),
=======
<<<<<<< HEAD
>>>>>>> parent of 3b43ba8... reinstall grunt
=======
    getHolder = require('./_getHolder'),
>>>>>>> master
>>>>>>> 42c2a3736f687e74ba3e3641cc79dbbb82bc5c8b
    replaceHolders = require('./_replaceHolders'),
    root = require('./_root');

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
 *  for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurryWrapper(func, bitmask, arity) {
  var Ctor = createCtorWrapper(func);

  function wrapper() {
    var length = arguments.length,
        index = length,
<<<<<<< HEAD
        placeholder = getPlaceholder(wrapper);
=======
<<<<<<< HEAD
        args = Array(length),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,
        placeholder = wrapper.placeholder;
>>>>>>> parent of 3b43ba8... reinstall grunt
=======
        placeholder = getHolder(wrapper);
>>>>>>> master
>>>>>>> 42c2a3736f687e74ba3e3641cc79dbbb82bc5c8b

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    return length < arity
      ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
      : apply(fn, this, args);
  }
  return wrapper;
}

module.exports = createCurryWrapper;
